(function (window, $, Modernizr) {
    Array.prototype.clean = function (deleteValue) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] == deleteValue) {
                this.splice(i, 1);
                i--;
            }
        }
        return this;
    };

    var $window = $(window),
        $topButton = $('#top-button'),
        $sidebar = $('.nav-sidebar'),
        $body = $('body'),
        $content;

    var _private = {
        currentPageInfo: {}
    };

    var common = {

        contentContainerId: '#document-content-container',

        contentElementId: '#document-content',

        $errorPublishedMessage: $('#error-published-message'),

        contentFolderName: 'help',

        homePages: ["index", "home-page"],

        topicAPI: "",

        isOnline: false,

        baseURI: window.baseURI || "",

        footer: $('#footer-container'),

        currentPageInfo: function (info) {
            if (info) {

                if (_private.currentPageInfo.pageName != info.pageName) {

                    // Google Analytics
                    //ga('send', 'pageview', location. name);

                    //tabs:
                    //$('<div>', { id: 'Syntax-VBAll' }).append($('#Syntax-VB')).append('&nbsp;').append($('#Syntax-VBUsage')).appendTo('.TabContainer');
                    //$(".TabContainer").tabs({
                    //    active: 1,
                    //    activate: function (event, ui) {
                    //        if (ui.newTab.children('a').attr('href') == "#Syntax-CS") {
                    //            $("div.FilteredContentCS").show();
                    //            $("div.FilteredContentVB").hide()
                    //        }
                    //        else {
                    //            $("div.FilteredContentCS").hide();
                    //            $("div.FilteredContentVB").show()
                    //        }
                    //    }
                    //});
                }
                _private.currentPageInfo = info;

                //if (info.title && common.shouldUsePushState()) {
                //    window.document.title = igViewer.locale.pageTitleFormat.replace("{0}", info.title);

                //    var emailLink = $("#fine-print a").not(".github-link");
                //    var href = emailLink.attr("href");
                //    href = href.split('=')[0] + '=' + info.title + " (" + info.pageName + ")";
                //    emailLink.attr("href", href);
                //}
                return;
            }

            return _private.currentPageInfo;
        },

        versionQuery: function (q) {
            var query = q || window.location.search;
            var version = query.match(/[\?&]v=(\d\d\.\d)/);
            if (version && version[1]) {
                return '?v=' + version[1];
            }
            return "";
        },

        isContentPage: function () {
            if (common.path && common.path.length) {
                return true;
            }

            if (common.isOnIndexPage()) {
                return true;
            }

            return false;
        },

        getPageInfo: function (fileName, title) {
            var pageName = fileName.replace(/\.html(?=\?|$)/i, '').toLowerCase();
            // TODO: better home pages handling
            if (common.isOnIndexPage(pageName) && !common.isOnline && common.baseURI) {
                common.baseURI = "../";
            }

            var ext = common.baseURI + fileName,
                noExt = common.baseURI + pageName,
                api = common.topicAPI + pageName;

            var info = {
                title: title,
                fileName: fileName,
                pageName: pageName,
                path: {
                    navigation: common.isOnline ? noExt : ext,
                    service: common.isOnline ? api : ext,
                    noExt: noExt,
                    api: api,
                    ext: ext
                },
                isContentPage: common.isContentPage()
            };

            return info;
        },

        getPageNameFromLocation: function () {
            var pathParts = window.location.pathname.split('/');
            pathParts = pathParts.clean('');
            var name = common.isOnline ? "" : common.homePages[2];

            if (pathParts.length > 1) {
                name = common.isOnline ? pathParts.pop().toLowerCase() : pathParts.pop();
            }

            //append version to the path:
            name += common.versionQuery();

            return decodeURIComponent(name);
        },

        isOnIndexPage: function (page) {
            if (!page) {
                var pathname = location.protocol + "//" + location.host + location.pathname;
                if (pathname === common.baseURI) {
                    return true;
                }
                page = pathname.replace(common.baseURI, "");
            };
            return jQuery.inArray(page, common.homePages) !== -1;
        },

        isCurrentPage: function (path, query) {
            path = path || window.location.protocol + "//" + window.location.host + window.location.pathname;
            path += common.versionQuery(query);
            return common.currentPageInfo().path.navigation == path;
        },

        isUsingWebServer: function () {
            var protocol = window.location.protocol;
            return (protocol === 'http:' || protocol === 'https:');
        },

        isSmallDeviceWidth: function () {
            return $window.width() < 768;
        },

        shouldUsePushState: function () {
            if (Modernizr.history) {
                return common.isUsingWebServer();
            }
            return false;
        },

        hasLocationHash: function () {
            return window.location.hash && window.location.hash.length > 0;
        },

        refreshHash: function () {
            //D.P. this actually works better than changing the hash back and forth, no extra history entries.
            if (common.hasLocationHash()) {
                window.location.assign(window.location.href);
            }
        },

        scrollToTop: function () {
            $('html, body').animate({ scrollTop: 0 }, 'fast');
        },

        adjustTopLinkPos: function () {
        	var scrollPos = $window.height() + $window.scrollTop();
        	var footerTop = common.footer.offset().top;
            if (scrollPos > footerTop) {
                $topButton.css({ position: "absolute" });
            }
            else {
                $topButton.css({ position: "fixed" });
            }
        },

        publishErrorToServer: function (error) {
            var errorText;

            if (error.message) {
                errorText = ' Message: ' + error.message;
            }

            if (error.stack) {
                errorText += ' Stack: ' + error.stack;
            }

            var msg = {
                errorText: errorText,
                url: window.document.location.href
            };

            $.post('api/error', msg);

            common.$errorPublishedMessage.fadeIn();
        },

        syncSidebarHeight: function () {
            var contentMinHeight = undefined,
                sidebarHeight = $sidebar.height();
            $content = $content || $(common.contentContainerId).parent();
            contentMinHeight = $content.data("defaultMinHeight");
            if (contentMinHeight === undefined) {
                contentMinHeight = parseInt($content.css("minHeight"), 10);
                $content.data("defaultMinHeight", contentMinHeight);
            }

            if (sidebarHeight > contentMinHeight) {
                $content.css("minHeight", sidebarHeight);
            } else {
                $content.css("minHeight", contentMinHeight);
            }
        },

        toAbsoluteURL: function (relative) {
            var a = window.document.createElement('a');
            a.href = relative;
            return a.href;
        },

        getProductList: function () {
            var value = $body.attr('data-product-list');
            var list = [];

            if (value !== undefined) {
                list = value.split('|');
            }

            return list;
        },

        isDvPage: function () {
            var pageName = common.getPageNameFromLocation();
            return pageName.indexOf("chart") !== -1 ||
                pageName.indexOf("excel_library") !== -1 ||
                pageName.indexOf("spreadsheet") !== -1 ||
                pageName.indexOf("bulletgraph") !== -1 ||
                pageName.indexOf("gauge") !==-1 ||
                pageName.indexOf("exporter") !==-1 ||
                pageName.indexOf("map") !==-1||
                pageName.indexOf("sparkline")!==-1||
                pageName.indexOf("zoomslider") !==-1 ;
        }
    };

    $topButton.children('button').click(function (e) {
        common.scrollToTop();
        this.blur();
    });

    common.$errorPublishedMessage.on("click", ".close", function (e) {
        common.$errorPublishedMessage.fadeOut();
    });

    common.isOnline = $('body').attr('data-mode') === "online";
    common.baseURI = common.toAbsoluteURL(common.baseURI);

    common.currentPageInfo(common.getPageInfo(common.getPageNameFromLocation()));

    common.adjustTopLinkPos();
    common.refreshHash();
    $window.scroll(common.adjustTopLinkPos);
    $window.one("load", function () {
        common.syncSidebarHeight();
    });
    //window.setTimeout(function () {
    //    $("#wrong-version").slideUp(500);
    //}, 5000);
    
    window.igViewer = window.igViewer || {};
    window.igViewer.common = common;

}(window, jQuery, Modernizr));
(function ($, Modernizr, window, igViewer) {

	var $window, $navContainer, $navButton;

	var svc = {

	    addImgResponsiveClass: function (element) {
	        var images = element.find('img');
	        images.each(function (imgIndex, img) {
	            var $img = $(img);
	            if (!$img.attr('class')) {
	                $img.addClass('img-responsive');
	            } else if ($img.attr('class').indexOf('img-responsive') === -1) {
	                $img.addClass('img-responsive');
	            }
	        });
	    }
	};

	$(function () {
	    var width,
            $element = $(".main-box");

	    $window = $(window);
	    $navButton = $('#nav-button');
	    $navContainer = $('#nav-container');

	    if ($element.length === 1) {
	        svc.addImgResponsiveClass($element);
	    }

	    var showOrHideNavigation = function () {
	        if ($(window).width() == width) {
	            return;
	        }
	        // cache width to stop misfires
	        width = $window.width();

	        if (window.matchMedia && window.matchMedia("print").matches) return;
	        var mode = (igViewer.common.isSmallDeviceWidth()) ? 'hide' : 'show';
	        $navContainer.collapse(mode);
	        //$navContainer[mode](350); // jquery version
	        igViewer.common.syncSidebarHeight();
	    };

	    //init collapse widget w/o toggle
	    $navContainer.collapse({ toggle: false });
	    showOrHideNavigation();

	    $window.on('resize', showOrHideNavigation);

	    $navButton.click(function (e) {
	        $navContainer.collapse('toggle');
	        //$navContainer.toggle(350); // jquery version

	        var isHidden = parseInt($navContainer.height()) === 0,
				label = (isHidden) ? igViewer.locale.navHideLabel : igViewer.locale.navShowLabel;

	        $navButton.text(label).blur();

	        if (label === igViewer.locale.navShowLabel) {
	            igViewer.common.scrollToTop();
	        }
	    });
	});

	igViewer = igViewer || {};
	igViewer.renderingService = svc;

}(jQuery, Modernizr, window, window.igViewer));
(function (window) {
var LZString=function(){function o(o,r){if(!t[o]){t[o]={};for(var n=0;n<o.length;n++)t[o][o.charAt(n)]=n}return t[o][r]}var r=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",t={},i={compressToBase64:function(o){if(null==o)return"";var r=i._compress(o,6,function(o){return n.charAt(o)});switch(r.length%4){default:case 0:return r;case 1:return r+"===";case 2:return r+"==";case 3:return r+"="}},decompressFromBase64:function(r){return null==r?"":""==r?null:i._decompress(r.length,32,function(e){return o(n,r.charAt(e))})},compressToUTF16:function(o){return null==o?"":i._compress(o,15,function(o){return r(o+32)})+" "},decompressFromUTF16:function(o){return null==o?"":""==o?null:i._decompress(o.length,16384,function(r){return o.charCodeAt(r)-32})},compressToUint8Array:function(o){for(var r=i.compress(o),n=new Uint8Array(2*r.length),e=0,t=r.length;t>e;e++){var s=r.charCodeAt(e);n[2*e]=s>>>8,n[2*e+1]=s%256}return n},decompressFromUint8Array:function(o){if(null===o||void 0===o)return i.decompress(o);for(var n=new Array(o.length/2),e=0,t=n.length;t>e;e++)n[e]=256*o[2*e]+o[2*e+1];var s=[];return n.forEach(function(o){s.push(r(o))}),i.decompress(s.join(""))},compressToEncodedURIComponent:function(o){return null==o?"":i._compress(o,6,function(o){return e.charAt(o)})},decompressFromEncodedURIComponent:function(r){return null==r?"":""==r?null:(r=r.replace(/ /g,"+"),i._decompress(r.length,32,function(n){return o(e,r.charAt(n))}))},compress:function(o){return i._compress(o,16,function(o){return r(o)})},_compress:function(o,r,n){if(null==o)return"";var e,t,i,s={},p={},u="",c="",a="",l=2,f=3,h=2,d=[],m=0,v=0;for(i=0;i<o.length;i+=1)if(u=o.charAt(i),Object.prototype.hasOwnProperty.call(s,u)||(s[u]=f++,p[u]=!0),c=a+u,Object.prototype.hasOwnProperty.call(s,c))a=c;else{if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++),s[c]=f++,a=String(u)}if(""!==a){if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++)}for(t=2,e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;for(;;){if(m<<=1,v==r-1){d.push(n(m));break}v++}return d.join("")},decompress:function(o){return null==o?"":""==o?null:i._decompress(o.length,32768,function(r){return o.charCodeAt(r)})},_decompress:function(o,n,e){var t,i,s,p,u,c,a,l,f=[],h=4,d=4,m=3,v="",w=[],A={val:e(0),position:n,index:1};for(i=0;3>i;i+=1)f[i]=i;for(p=0,c=Math.pow(2,2),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(t=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 2:return""}for(f[3]=l,s=l,w.push(l);;){if(A.index>o)return"";for(p=0,c=Math.pow(2,m),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(l=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 2:return w.join("")}if(0==h&&(h=Math.pow(2,m),m++),f[l])v=f[l];else{if(l!==d)return null;v=s+s.charAt(0)}w.push(v),f[d++]=s+v.charAt(0),h--,s=v,0==h&&(h=Math.pow(2,m),m++)}}};return i}();"function"==typeof define&&define.amd?define(function(){return LZString}):"undefined"!=typeof module&&null!=module&&(module.exports=LZString);
window.LZString = LZString || {};
}(window));

(function() {
    function initNavigation() {
         var navBaseUrl = $('body').data('nav-base-url');
         var navUrl = navBaseUrl + '/navigation';

         var request = $.ajax({
             url: navUrl,
             type: 'get',
             xhrFields: {
                 withCredentials: false
             }
         }).done(function(data) {
             var nav = $(data);
             var header = nav.find('#header')[0].outerHTML;
             $('#header').replaceWith(header);

             var logOutLink = $('#logOutLink');
             if (logOutLink.length !== 0) {
                 // Removing query string. It might contain bad ReturnUrl.
                 var newLink = logOutLink.attr('href').split('?')[0];
                 logOutLink.attr('href', newLink);
             }

             var footer = nav.find('footer.ui-footer')[0].outerHTML;
             $('footer.ui-footer').replaceWith(footer);

             var copyrightFooter = nav.find('#footer')[0].outerHTML;
             $('#footer').replaceWith(copyrightFooter);

             window.igViewer.common.footer = $('#footer-container');
             igNavigation.init();
         }).fail(function(){
            window.igViewer.common.footer = $('#footer-container');
            igNavigation.init();
         });
    }

    initNavigation();

    $(document).ready(function() {
        window.igViewer.common.adjustTopLinkPos();
    });
})();

(function () {
    console.log(window.LZString);
	var buttonClass = "stackblitz-btn";
    var buttonIframeIdAttrName = "data-iframe-id";
    var buttonSampleSourceAttrName = "data-sample-src";
    var buttonDemosUrlAttrName = "data-demos-base-url";
    var stackBlitzApiUrl = "https://codesandbox.io/api/v1/sandboxes/define";
    var sharedFileName = "shared.json";
    var assetsFolder = "/assets/";
    var demoFilesFolderUrlPath =  assetsFolder + "samples/";
    var demoFilesCSSSupportFolderUrlPath = demoFilesFolderUrlPath + "css-support/";
    var assetsRegex = new RegExp("\/?assets\/", "g");
    var sampleFilesContentByUrl = {};
    var isIE = navigator.userAgent.indexOf('MSIE')!==-1 || navigator.appVersion.indexOf('Trident/') > 0;
    var isEdge = navigator.userAgent.indexOf('Edge')!==-1;

    var isButtonClickInProgress = false;

    var demosTimeStamp;
       
    var sharedFileContent;
	var init = function () {
        var stackblitzButtons = $("." + buttonClass);  

        if (stackblitzButtons.length > 0) {
            var demosBaseUrls = new Set();

            $.each(stackblitzButtons, function(index, element){
                demosBaseUrls.add($(element).attr(buttonDemosUrlAttrName))
            });

            var hasMultipleUrls = demosBaseUrls.size > 1;

            if (hasMultipleUrls) {
                demosBaseUrls.forEach(function(url) {
                    var currentDemoUrlButtons = $(stackblitzButtons).filter(function(index, element) {
                        return $(element).attr(buttonDemosUrlAttrName) === url;
                    });
                    generateStackBlitz(url, currentDemoUrlButtons)
                });

            } else {
                demosBaseUrl = $(stackblitzButtons[0]).attr(buttonDemosUrlAttrName);
                generateStackBlitz(demosBaseUrl, stackblitzButtons)
            }
        } 
    }
    
    var generateStackBlitz = function(demosBaseUrl, $buttons) {
        var samplesFilesUrls = []; 

        $.each($buttons, function(index, element) {

            var $button = $(element);
            var sampleFileUrl = getSampleUrlByStackBlitzButton($button, demosBaseUrl);

            if (samplesFilesUrls.indexOf(sampleFileUrl) === -1) {
                samplesFilesUrls.push(sampleFileUrl);
            }

            $button.on("click", onStackblitzButtonClicked);
        });
           
        var metaFileUrl = demosBaseUrl + getDemoFilesFolderUrlPath() + "meta.json";
        // prevent caching 
        metaFileUrl += "?t=" + new Date().getTime();
 
        $.get(metaFileUrl).done(function(response) {
            demosTimeStamp = response.generationTimeStamp;
            getFiles($buttons, demosBaseUrl, samplesFilesUrls, demosTimeStamp);
        });
    }

   var getFiles = function($buttons, demosBaseUrl, samplesFilesUrls, demosTimeStamp) {

        var sharedFileUrl = demosBaseUrl + getDemoFilesFolderUrlPath() + sharedFileName;
        sharedFileUrl = addTimeStamp(sharedFileUrl, demosTimeStamp);

        var requests = [$.get(sharedFileUrl)];

        $.each(samplesFilesUrls, function(index, url) {
            url = addTimeStamp(url, demosTimeStamp);
            var ajax = $.get(url);
            requests.push(ajax);
        });

        $.when.apply($, requests).done(function() {
            replaceRelativeAssetsUrls(arguments[0][0].files, demosBaseUrl);
            sharedFileContent = arguments[0][0];
            
            for(var i = 1; i < arguments.length; i++) {
                replaceRelativeAssetsUrls(arguments[i][0].sampleFiles, demosBaseUrl);
                var url = this[i].url;
                url = removeQueryString(url);
                sampleFilesContentByUrl[url] = arguments[i][0];
            }

            $buttons.removeAttr("disabled");
        });
    }

    var addTimeStamp = function(url, demosTimeStamp) {
        if (!demosTimeStamp) {
            throw Error("Timestamp cannot be added.");
        }

        url += "?t=" + demosTimeStamp;
        return url;
    }

    var removeQueryString = function(url) {
        var questionMarkIndex = url.indexOf('?');
        if (questionMarkIndex !== -1) {
            url = url.substring(0, questionMarkIndex);
        }

        return url;
    }

    var getDemoFilesFolderUrlPath = function() {
        if (isIE || isEdge) {
            return demoFilesCSSSupportFolderUrlPath;
        }

        return demoFilesFolderUrlPath;
    }

    var getSampleUrlByStackBlitzButton = function ($button, demosBaseUrl) {
        var sampleSrc = "";
        var buttonIframeId = $button.attr(buttonIframeIdAttrName);
        if (buttonIframeId) {
            var iframe = $("#" + buttonIframeId);
            if (iframe.attr("src")) {
                sampleSrc = iframe.attr("src");
            } else {
                sampleSrc = iframe.attr("data-src");
            }            
        } else {
            sampleSrc = $button.attr(buttonSampleSourceAttrName);
        }

        var demoPath = sampleSrc.replace(demosBaseUrl + "/", "");
        demoPath = demoPath.replace("/", "-");
        var demoFileUrl = demosBaseUrl  +
            getDemoFilesFolderUrlPath().substring(0, getDemoFilesFolderUrlPath().length - 1) +
                "/" + demoPath + ".json";
        return demoFileUrl;
    }

    var onStackblitzButtonClicked = function (event) {
		if (isButtonClickInProgress) {
			return;
        } 

        isButtonClickInProgress = true;
        var $button = $(this);
        var sampleFileUrl = getSampleUrlByStackBlitzButton($button, $(this).attr(buttonDemosUrlAttrName));
        var sampleContent = sampleFilesContentByUrl[sampleFileUrl];
        var formData = {
            dependencies: sampleContent.sampleDependencies,
            files: sharedFileContent.files.concat(sampleContent.sampleFiles)
        }

        var form = createStackblitzForm(formData);
        form.appendTo($("body"));
        form.submit();
        form.remove();
        isButtonClickInProgress = false;
    }

    var replaceRelativeAssetsUrls = function (files, demosBaseUrl) {
        var assetsUrl = demosBaseUrl + assetsFolder;
        for (var i = 0; i < files.length; i++) {
            if (files[i].hasRelativeAssetsUrls) {
                files[i].content = files[i].content.replace(assetsRegex, assetsUrl);
            }
        }
    }

    /*  a sample forms object -
        {
            description: `The greatest sample`,
            files: [{
                path: `src/index.html`,
                content: `<h1>Hello world!</h1>`
            }],
            dependencies: `"@angular/animations": "^5.2.0",
                "@angular/common": "^5.2.0"`,
            tags: ["tagA", "tagB", "tagC"]
        }
    */
   var  toObject = function (arr) {
    var rv = {};
    for (var i = 0; i < arr.length; ++i)
    rv[arr[i]] = arr[i]
    return rv;
  }

  function compress(input) {
    return window.LZString.compressToBase64(input)
      .replace(/\+/g, `-`) // Convert '+' to '-'
      .replace(/\//g, `_`) // Convert '/' to '_'
      .replace(/=+$/, ``); // Remove ending '='
  }
  
    var createStackblitzForm = function (data) {
        const fileToSandbox = { files: {
            "package.json": {
                "content": {
                    "dependencies": JSON.parse(data.dependencies),
                    "devDependencies": {
                        "@angular-devkit/build-angular": "^0.901.7",
                        "@angular/cli": "9.1.7",
                        "@angular/compiler-cli": "9.1.9",
                        "@angular/language-service": "9.1.9",
                        "@igniteui/angular-schematics": "^9.1.510",
                        "@types/jasmine": "^3.5.10",
                        "@types/jasminewd2": "^2.0.8",
                        "@types/node": "^13.9.3",
                        "codelyzer": "^5.2.1",
                        "fs-extra": "^8.1.0",
                        "gulp": "^4.0.2",
                        "jasmine-core": "~3.5.0",
                        "jasmine-spec-reporter": "~4.2.1",
                        "karma": "^4.4.1",
                        "karma-chrome-launcher": "~3.1.0",
                        "karma-cli": "~2.0.0",
                        "karma-coverage-istanbul-reporter": "^2.1.1",
                        "karma-jasmine": "^3.1.1",
                        "karma-jasmine-html-reporter": "^1.5.2",
                        "node-sass": "^4.13.1",
                        "protractor": "^5.4.3",
                        "sass.js": "0.11.1",
                        "ts-node": "^8.8.1",
                        "tslint": "5.12.1",
                        "typescript": "3.6.4"
                      }
                }
            }
        }};
        const f = data.files.forEach(f => {
            fileToSandbox.files[f["path"]] = {
                content: f["content"]
            }
        });
        console.log(fileToSandbox)

        var form = $("<form />", {
                method: "POST",
                action: stackBlitzApiUrl,
                target: "_blank",
                style: "display: none;"
        });

        var fileInput = $("<input />", {
            type: "hidden",
            name: "parameters",
            value: compress(JSON.stringify(fileToSandbox))
        });

        fileInput.appendTo(form)

        // // files
        // for (var i = 0; i < data.files.length; i++) {

        // }
    
        // // tags
        // if (data.tags) {
        //     for (var i = 0; i < data.tags.length; i++) {
        //         var tagInput = $("<input />", {
        //             type: "hidden",
        //             name: "tags[" + i + "]",
        //             value: data.tags[i]
        //         });

        //         tagInput.appendTo(tagInput);
        //     }
        // } 
  
        // // description
        // if (data.description) {
        //     var descriptionInput = $("<input />", {
        //         type: "hidden",
        //         name: "description",
        //         value: data.description
        //     });

        //     descriptionInput.appendTo(form);
        // }

        // // dependencies
        // var dependenciesInput = $("<input />", {
        //     type: "hidden",
        //     name: "dependencies",
        //     value: data.dependencies
        // });

        // dependenciesInput.appendTo(form);
        return form;
    }

    $(document).ready(function() {
        init();
    });
}());
/*!
  hey, [be]Lazy.js - v1.8.2 - 2016.10.25
  A fast, small and dependency free lazy load script (https://github.com/dinbror/blazy)
  (c) Bjoern Klinggaard - @bklinggaard - http://dinbror.dk/blazy
*/
(function(q,m){"function"===typeof define&&define.amd?define(m):"object"===typeof exports?module.exports=m():q.Blazy=m()})(this,function(){function q(b){var c=b._util;c.elements=E(b.options);c.count=c.elements.length;c.destroyed&&(c.destroyed=!1,b.options.container&&l(b.options.container,function(a){n(a,"scroll",c.validateT)}),n(window,"resize",c.saveViewportOffsetT),n(window,"resize",c.validateT),n(window,"scroll",c.validateT));m(b)}function m(b){for(var c=b._util,a=0;a<c.count;a++){var d=c.elements[a],e;a:{var g=d;e=b.options;var p=g.getBoundingClientRect();if(e.container&&y&&(g=g.closest(e.containerClass))){g=g.getBoundingClientRect();e=r(g,f)?r(p,{top:g.top-e.offset,right:g.right+e.offset,bottom:g.bottom+e.offset,left:g.left-e.offset}):!1;break a}e=r(p,f)}if(e||t(d,b.options.successClass))b.load(d),c.elements.splice(a,1),c.count--,a--}0===c.count&&b.destroy()}function r(b,c){return b.right>=c.left&&b.bottom>=c.top&&b.left<=c.right&&b.top<=c.bottom}function z(b,c,a){if(!t(b,a.successClass)&&(c||a.loadInvisible||0<b.offsetWidth&&0<b.offsetHeight))if(c=b.getAttribute(u)||b.getAttribute(a.src)){c=c.split(a.separator);var d=c[A&&1<c.length?1:0],e=b.getAttribute(a.srcset),g="img"===b.nodeName.toLowerCase(),p=(c=b.parentNode)&&"picture"===c.nodeName.toLowerCase();if(g||void 0===b.src){var h=new Image,w=function(){a.error&&a.error(b,"invalid");v(b,a.errorClass);k(h,"error",w);k(h,"load",f)},f=function(){g?p||B(b,d,e):b.style.backgroundImage='url("'+d+'")';x(b,a);k(h,"load",f);k(h,"error",w)};p&&(h=b,l(c.getElementsByTagName("source"),function(b){var c=a.srcset,e=b.getAttribute(c);e&&(b.setAttribute("srcset",e),b.removeAttribute(c))}));n(h,"error",w);n(h,"load",f);B(h,d,e)}else b.src=d,x(b,a)}else"video"===b.nodeName.toLowerCase()?(l(b.getElementsByTagName("source"),function(b){var c=a.src,e=b.getAttribute(c);e&&(b.setAttribute("src",e),b.removeAttribute(c))}),b.load(),x(b,a)):(a.error&&a.error(b,"missing"),v(b,a.errorClass))}function x(b,c){v(b,c.successClass);c.success&&c.success(b);b.removeAttribute(c.src);b.removeAttribute(c.srcset);l(c.breakpoints,function(a){b.removeAttribute(a.src)})}function B(b,c,a){a&&b.setAttribute("srcset",a);b.src=c}function t(b,c){return-1!==(" "+b.className+" ").indexOf(" "+c+" ")}function v(b,c){t(b,c)||(b.className+=" "+c)}function E(b){var c=[];b=b.root.querySelectorAll(b.selector);for(var a=b.length;a--;c.unshift(b[a]));return c}function C(b){f.bottom=(window.innerHeight||document.documentElement.clientHeight)+b;f.right=(window.innerWidth||document.documentElement.clientWidth)+b}function n(b,c,a){b.attachEvent?b.attachEvent&&b.attachEvent("on"+c,a):b.addEventListener(c,a,{capture:!1,passive:!0})}function k(b,c,a){b.detachEvent?b.detachEvent&&b.detachEvent("on"+c,a):b.removeEventListener(c,a,{capture:!1,passive:!0})}function l(b,c){if(b&&c)for(var a=b.length,d=0;d<a&&!1!==c(b[d],d);d++);}function D(b,c,a){var d=0;return function(){var e=+new Date;e-d<c||(d=e,b.apply(a,arguments))}}var u,f,A,y;return function(b){if(!document.querySelectorAll){var c=document.createStyleSheet();document.querySelectorAll=function(a,b,d,h,f){f=document.all;b=[];a=a.replace(/\[for\b/gi,"[htmlFor").split(",");for(d=a.length;d--;){c.addRule(a[d],"k:v");for(h=f.length;h--;)f[h].currentStyle.k&&b.push(f[h]);c.removeRule(0)}return b}}var a=this,d=a._util={};d.elements=[];d.destroyed=!0;a.options=b||{};a.options.error=a.options.error||!1;a.options.offset=a.options.offset||100;a.options.root=a.options.root||document;a.options.success=a.options.success||!1;a.options.selector=a.options.selector||".b-lazy";a.options.separator=a.options.separator||"|";a.options.containerClass=a.options.container;a.options.container=a.options.containerClass?document.querySelectorAll(a.options.containerClass):!1;a.options.errorClass=a.options.errorClass||"b-error";a.options.breakpoints=a.options.breakpoints||!1;a.options.loadInvisible=a.options.loadInvisible||!1;a.options.successClass=a.options.successClass||"b-loaded";a.options.validateDelay=a.options.validateDelay||25;a.options.saveViewportOffsetDelay=a.options.saveViewportOffsetDelay||50;a.options.srcset=a.options.srcset||"data-srcset";a.options.src=u=a.options.src||"data-src";y=Element.prototype.closest;A=1<window.devicePixelRatio;f={};f.top=0-a.options.offset;f.left=0-a.options.offset;a.revalidate=function(){q(a)};a.load=function(a,b){var c=this.options;void 0===a.length?z(a,b,c):l(a,function(a){z(a,b,c)})};a.destroy=function(){var a=this._util;this.options.container&&l(this.options.container,function(b){k(b,"scroll",a.validateT)});k(window,"scroll",a.validateT);k(window,"resize",a.validateT);k(window,"resize",a.saveViewportOffsetT);a.count=0;a.elements.length=0;a.destroyed=!0};d.validateT=D(function(){m(a)},a.options.validateDelay,a);d.saveViewportOffsetT=D(function(){C(a.options.offset)},a.options.saveViewportOffsetDelay,a);C(a.options.offset);l(a.options.breakpoints,function(a){if(a.width>=window.screen.width)return u=a.src,!1});setTimeout(function(){q(a)})}});

(function(){
  var bLazy;
  $(function() {
    bLazy = new Blazy({
        offset: 250,
        success: function (ele) {
          if ($(ele).hasClass('b-lazy-gifs')) {
              var gifSrc = $(ele).data('gif-src'),
                  gifSrcSet = $(ele).data('gif-srcset');
              $(ele).attr({ 'src': gifSrc, 'srcset': gifSrcSet }).removeAttr('data-gif-src data-gif-srcset');
          }
        }
    });
  });

  $(document).on('load', function() {
    bLazy.revalidate();
  });
})();
(function(window, factory) {
	var lazySizes = factory(window, window.document);
	window.lazySizes = lazySizes;
	if(typeof module == 'object' && module.exports){
		module.exports = lazySizes;
	}
}(window, function l(window, document) {
	'use strict';
	/*jshint eqnull:true */
	if(!document.getElementsByClassName){return;}

	var lazysizes, lazySizesConfig;

	var docElem = document.documentElement;

	var Date = window.Date;

	var supportPicture = window.HTMLPictureElement;

	var _addEventListener = 'addEventListener';

	var _getAttribute = 'getAttribute';

	var addEventListener = window[_addEventListener];

	var setTimeout = window.setTimeout;

	var requestAnimationFrame = window.requestAnimationFrame || setTimeout;

	var requestIdleCallback = window.requestIdleCallback;

	var regPicture = /^picture$/i;

	var loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];

	var regClassCache = {};

	var forEach = Array.prototype.forEach;

	var hasClass = function(ele, cls) {
		if(!regClassCache[cls]){
			regClassCache[cls] = new RegExp('(\\s|^)'+cls+'(\\s|$)');
		}
		return regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];
	};

	var addClass = function(ele, cls) {
		if (!hasClass(ele, cls)){
			ele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);
		}
	};

	var removeClass = function(ele, cls) {
		var reg;
		if ((reg = hasClass(ele,cls))) {
			ele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));
		}
	};

	var addRemoveLoadEvents = function(dom, fn, add){
		var action = add ? _addEventListener : 'removeEventListener';
		if(add){
			addRemoveLoadEvents(dom, fn);
		}
		loadEvents.forEach(function(evt){
			dom[action](evt, fn);
		});
	};

	var triggerEvent = function(elem, name, detail, noBubbles, noCancelable){
		var event = document.createEvent('Event');

		if(!detail){
			detail = {};
		}

		detail.instance = lazysizes;

		event.initEvent(name, !noBubbles, !noCancelable);

		event.detail = detail;

		elem.dispatchEvent(event);
		return event;
	};

	var updatePolyfill = function (el, full){
		var polyfill;
		if( !supportPicture && ( polyfill = (window.picturefill || lazySizesConfig.pf) ) ){
			if(full && full.src && !el[_getAttribute]('srcset')){
				el.setAttribute('srcset', full.src);
			}
			polyfill({reevaluate: true, elements: [el]});
		} else if(full && full.src){
			el.src = full.src;
		}
	};

	var getCSS = function (elem, style){
		return (getComputedStyle(elem, null) || {})[style];
	};

	var getWidth = function(elem, parent, width){
		width = width || elem.offsetWidth;

		while(width < lazySizesConfig.minSize && parent && !elem._lazysizesWidth){
			width =  parent.offsetWidth;
			parent = parent.parentNode;
		}

		return width;
	};

	var rAF = (function(){
		var running, waiting;
		var firstFns = [];
		var secondFns = [];
		var fns = firstFns;

		var run = function(){
			var runFns = fns;

			fns = firstFns.length ? secondFns : firstFns;

			running = true;
			waiting = false;

			while(runFns.length){
				runFns.shift()();
			}

			running = false;
		};

		var rafBatch = function(fn, queue){
			if(running && !queue){
				fn.apply(this, arguments);
			} else {
				fns.push(fn);

				if(!waiting){
					waiting = true;
					(document.hidden ? setTimeout : requestAnimationFrame)(run);
				}
			}
		};

		rafBatch._lsFlush = run;

		return rafBatch;
	})();

	var rAFIt = function(fn, simple){
		return simple ?
			function() {
				rAF(fn);
			} :
			function(){
				var that = this;
				var args = arguments;
				rAF(function(){
					fn.apply(that, args);
				});
			}
		;
	};

	var throttle = function(fn){
		var running;
		var lastTime = 0;
		var gDelay = lazySizesConfig.throttleDelay;
		var rICTimeout = lazySizesConfig.ricTimeout;
		var run = function(){
			running = false;
			lastTime = Date.now();
			fn();
		};
		var idleCallback = requestIdleCallback && rICTimeout > 49 ?
			function(){
				requestIdleCallback(run, {timeout: rICTimeout});

				if(rICTimeout !== lazySizesConfig.ricTimeout){
					rICTimeout = lazySizesConfig.ricTimeout;
				}
			} :
			rAFIt(function(){
				setTimeout(run);
			}, true)
		;

		return function(isPriority){
			var delay;

			if((isPriority = isPriority === true)){
				rICTimeout = 33;
			}

			if(running){
				return;
			}

			running =  true;

			delay = gDelay - (Date.now() - lastTime);

			if(delay < 0){
				delay = 0;
			}

			if(isPriority || delay < 9){
				idleCallback();
			} else {
				setTimeout(idleCallback, delay);
			}
		};
	};

	//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html
	var debounce = function(func) {
		var timeout, timestamp;
		var wait = 99;
		var run = function(){
			timeout = null;
			func();
		};
		var later = function() {
			var last = Date.now() - timestamp;

			if (last < wait) {
				setTimeout(later, wait - last);
			} else {
				(requestIdleCallback || run)(run);
			}
		};

		return function() {
			timestamp = Date.now();

			if (!timeout) {
				timeout = setTimeout(later, wait);
			}
		};
	};

	(function(){
		var prop;

		var lazySizesDefaults = {
			lazyClass: 'lazyload',
			loadedClass: 'lazyloaded',
			loadingClass: 'lazyloading',
			preloadClass: 'lazypreload',
			errorClass: 'lazyerror',
			//strictClass: 'lazystrict',
			autosizesClass: 'lazyautosizes',
			srcAttr: 'data-src',
			srcsetAttr: 'data-srcset',
			sizesAttr: 'data-sizes',
			//preloadAfterLoad: false,
			minSize: 40,
			customMedia: {},
			init: true,
			expFactor: 1.5,
			hFac: 0.8,
			loadMode: 2,
			loadHidden: true,
			ricTimeout: 0,
			throttleDelay: 125,
		};

		lazySizesConfig = window.lazySizesConfig || window.lazysizesConfig || {};

		for(prop in lazySizesDefaults){
			if(!(prop in lazySizesConfig)){
				lazySizesConfig[prop] = lazySizesDefaults[prop];
			}
		}

		window.lazySizesConfig = lazySizesConfig;

		setTimeout(function(){
			if(lazySizesConfig.init){
				init();
			}
		});
	})();

	var loader = (function(){
		var preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;

		var eLvW, elvH, eLtop, eLleft, eLright, eLbottom;

		var defaultExpand, preloadExpand, hFac;

		var regImg = /^img$/i;
		var regIframe = /^iframe$/i;

		var supportScroll = ('onscroll' in window) && !(/(gle|ing)bot/.test(navigator.userAgent));

		var shrinkExpand = 0;
		var currentExpand = 0;

		var isLoading = 0;
		var lowRuns = -1;

		var resetPreloading = function(e){
			isLoading--;
			if(e && e.target){
				addRemoveLoadEvents(e.target, resetPreloading);
			}

			if(!e || isLoading < 0 || !e.target){
				isLoading = 0;
			}
		};

		var isNestedVisible = function(elem, elemExpand){
			var outerRect;
			var parent = elem;
			var visible = getCSS(document.body, 'visibility') == 'hidden' || (getCSS(elem.parentNode, 'visibility') != 'hidden' && getCSS(elem, 'visibility') != 'hidden');

			eLtop -= elemExpand;
			eLbottom += elemExpand;
			eLleft -= elemExpand;
			eLright += elemExpand;

			while(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){
				visible = ((getCSS(parent, 'opacity') || 1) > 0);

				if(visible && getCSS(parent, 'overflow') != 'visible'){
					outerRect = parent.getBoundingClientRect();
					visible = eLright > outerRect.left &&
						eLleft < outerRect.right &&
						eLbottom > outerRect.top - 1 &&
						eLtop < outerRect.bottom + 1
					;
				}
			}

			return visible;
		};

		var checkElements = function() {
			var eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal, beforeExpandVal;

			var lazyloadElems = lazysizes.elements;

			if((loadMode = lazySizesConfig.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){

				i = 0;

				lowRuns++;

				if(preloadExpand == null){
					if(!('expand' in lazySizesConfig)){
						lazySizesConfig.expand = docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370;
					}

					defaultExpand = lazySizesConfig.expand;
					preloadExpand = defaultExpand * lazySizesConfig.expFactor;
				}

				if(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){
					currentExpand = preloadExpand;
					lowRuns = 0;
				} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){
					currentExpand = defaultExpand;
				} else {
					currentExpand = shrinkExpand;
				}

				for(; i < eLlen; i++){

					if(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}

					if(!supportScroll){unveilElement(lazyloadElems[i]);continue;}

					if(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){
						elemExpand = currentExpand;
					}

					if(beforeExpandVal !== elemExpand){
						eLvW = innerWidth + (elemExpand * hFac);
						elvH = innerHeight + elemExpand;
						elemNegativeExpand = elemExpand * -1;
						beforeExpandVal = elemExpand;
					}

					rect = lazyloadElems[i].getBoundingClientRect();

					if ((eLbottom = rect.bottom) >= elemNegativeExpand &&
						(eLtop = rect.top) <= elvH &&
						(eLright = rect.right) >= elemNegativeExpand * hFac &&
						(eLleft = rect.left) <= eLvW &&
						(eLbottom || eLright || eLleft || eLtop) &&
						(lazySizesConfig.loadHidden || getCSS(lazyloadElems[i], 'visibility') != 'hidden') &&
						((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){
						unveilElement(lazyloadElems[i]);
						loadedSomething = true;
						if(isLoading > 9){break;}
					} else if(!loadedSomething && isCompleted && !autoLoadElem &&
						isLoading < 4 && lowRuns < 4 && loadMode > 2 &&
						(preloadElems[0] || lazySizesConfig.preloadAfterLoad) &&
						(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesConfig.sizesAttr) != 'auto')))){
						autoLoadElem = preloadElems[0] || lazyloadElems[i];
					}
				}

				if(autoLoadElem && !loadedSomething){
					unveilElement(autoLoadElem);
				}
			}
		};

		var throttledCheckElements = throttle(checkElements);

		var switchLoadingClass = function(e){
			addClass(e.target, lazySizesConfig.loadedClass);
			removeClass(e.target, lazySizesConfig.loadingClass);
			addRemoveLoadEvents(e.target, rafSwitchLoadingClass);
			triggerEvent(e.target, 'lazyloaded');
		};
		var rafedSwitchLoadingClass = rAFIt(switchLoadingClass);
		var rafSwitchLoadingClass = function(e){
			rafedSwitchLoadingClass({target: e.target});
		};

		var changeIframeSrc = function(elem, src){
			try {
				elem.contentWindow.location.replace(src);
			} catch(e){
				elem.src = src;
			}
		};

		var handleSources = function(source){
			var customMedia;

			var sourceSrcset = source[_getAttribute](lazySizesConfig.srcsetAttr);

			if( (customMedia = lazySizesConfig.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){
				source.setAttribute('media', customMedia);
			}

			if(sourceSrcset){
				source.setAttribute('srcset', sourceSrcset);
			}
		};

		var lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){
			var src, srcset, parent, isPicture, event, firesLoad;

			if(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){

				if(sizes){
					if(isAuto){
						addClass(elem, lazySizesConfig.autosizesClass);
					} else {
						elem.setAttribute('sizes', sizes);
					}
				}

				srcset = elem[_getAttribute](lazySizesConfig.srcsetAttr);
				src = elem[_getAttribute](lazySizesConfig.srcAttr);

				if(isImg) {
					parent = elem.parentNode;
					isPicture = parent && regPicture.test(parent.nodeName || '');
				}

				firesLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));

				event = {target: elem};

				if(firesLoad){
					addRemoveLoadEvents(elem, resetPreloading, true);
					clearTimeout(resetPreloadingTimer);
					resetPreloadingTimer = setTimeout(resetPreloading, 2500);

					addClass(elem, lazySizesConfig.loadingClass);
					addRemoveLoadEvents(elem, rafSwitchLoadingClass, true);
				}

				if(isPicture){
					forEach.call(parent.getElementsByTagName('source'), handleSources);
				}

				if(srcset){
					elem.setAttribute('srcset', srcset);
				} else if(src && !isPicture){
					if(regIframe.test(elem.nodeName)){
						changeIframeSrc(elem, src);
					} else {
						elem.src = src;
					}
				}

				if(isImg && (srcset || isPicture)){
					updatePolyfill(elem, {src: src});
				}
			}

			if(elem._lazyRace){
				delete elem._lazyRace;
			}
			removeClass(elem, lazySizesConfig.lazyClass);

			rAF(function(){
				if( !firesLoad || (elem.complete && elem.naturalWidth > 1)){
					if(firesLoad){
						resetPreloading(event);
					} else {
						isLoading--;
					}
					switchLoadingClass(event);
				}
			}, true);
		});

		var unveilElement = function (elem){
			var detail;

			var isImg = regImg.test(elem.nodeName);

			//allow using sizes="auto", but don't use. it's invalid. Use data-sizes="auto" or a valid value for sizes instead (i.e.: sizes="80vw")
			var sizes = isImg && (elem[_getAttribute](lazySizesConfig.sizesAttr) || elem[_getAttribute]('sizes'));
			var isAuto = sizes == 'auto';

			if( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesConfig.errorClass) && hasClass(elem, lazySizesConfig.lazyClass)){return;}

			detail = triggerEvent(elem, 'lazyunveilread').detail;

			if(isAuto){
				 autoSizer.updateElem(elem, true, elem.offsetWidth);
			}

			elem._lazyRace = true;
			isLoading++;

			lazyUnveil(elem, detail, isAuto, sizes, isImg);
		};

		var onload = function(){
			if(isCompleted){return;}
			if(Date.now() - started < 999){
				setTimeout(onload, 999);
				return;
			}
			var afterScroll = debounce(function(){
				lazySizesConfig.loadMode = 3;
				throttledCheckElements();
			});

			isCompleted = true;

			lazySizesConfig.loadMode = 3;

			throttledCheckElements();

			addEventListener('scroll', function(){
				if(lazySizesConfig.loadMode == 3){
					lazySizesConfig.loadMode = 2;
				}
				afterScroll();
			}, true);
		};

		return {
			_: function(){
				started = Date.now();

				lazysizes.elements = document.getElementsByClassName(lazySizesConfig.lazyClass);
				preloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass + ' ' + lazySizesConfig.preloadClass);
				hFac = lazySizesConfig.hFac;

				addEventListener('scroll', throttledCheckElements, true);

				addEventListener('resize', throttledCheckElements, true);

				if(window.MutationObserver){
					new MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );
				} else {
					docElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);
					docElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);
					setInterval(throttledCheckElements, 999);
				}

				addEventListener('hashchange', throttledCheckElements, true);

				//, 'fullscreenchange'
				['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend', 'webkitAnimationEnd'].forEach(function(name){
					document[_addEventListener](name, throttledCheckElements, true);
				});

				if((/d$|^c/.test(document.readyState))){
					onload();
				} else {
					addEventListener('load', onload);
					document[_addEventListener]('DOMContentLoaded', throttledCheckElements);
					setTimeout(onload, 20000);
				}

				if(lazysizes.elements.length){
					checkElements();
					rAF._lsFlush();
				} else {
					throttledCheckElements();
				}
			},
			checkElems: throttledCheckElements,
			unveil: unveilElement
		};
	})();


	var autoSizer = (function(){
		var autosizesElems;

		var sizeElement = rAFIt(function(elem, parent, event, width){
			var sources, i, len;
			elem._lazysizesWidth = width;
			width += 'px';

			elem.setAttribute('sizes', width);

			if(regPicture.test(parent.nodeName || '')){
				sources = parent.getElementsByTagName('source');
				for(i = 0, len = sources.length; i < len; i++){
					sources[i].setAttribute('sizes', width);
				}
			}

			if(!event.detail.dataAttr){
				updatePolyfill(elem, event.detail);
			}
		});
		var getSizeElement = function (elem, dataAttr, width){
			var event;
			var parent = elem.parentNode;

			if(parent){
				width = getWidth(elem, parent, width);
				event = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});

				if(!event.defaultPrevented){
					width = event.detail.width;

					if(width && width !== elem._lazysizesWidth){
						sizeElement(elem, parent, event, width);
					}
				}
			}
		};

		var updateElementsSizes = function(){
			var i;
			var len = autosizesElems.length;
			if(len){
				i = 0;

				for(; i < len; i++){
					getSizeElement(autosizesElems[i]);
				}
			}
		};

		var debouncedUpdateElementsSizes = debounce(updateElementsSizes);

		return {
			_: function(){
				autosizesElems = document.getElementsByClassName(lazySizesConfig.autosizesClass);
				addEventListener('resize', debouncedUpdateElementsSizes);
			},
			checkElems: debouncedUpdateElementsSizes,
			updateElem: getSizeElement
		};
	})();

	var init = function(){
		if(!init.i){
			init.i = true;
			autoSizer._();
			loader._();
		}
	};

	lazysizes = {
		cfg: lazySizesConfig,
		autoSizer: autoSizer,
		loader: loader,
		init: init,
		uP: updatePolyfill,
		aC: addClass,
		rC: removeClass,
		hC: hasClass,
		fire: triggerEvent,
		gW: getWidth,
		rAF: rAF,
	};

	return lazysizes;
}
));

document.addEventListener('lazyloaded', function(e){
    $(e.target).parent().removeClass("loading");
    if (!window.igViewer.common.isDvPage() && !$(e.target).hasClass("no-theming")) {
        var isIE = !(window.ActiveXObject) && "ActiveXObject" in window;
        var targetOrigin = document.body.getAttribute("data-demos-base-url");
        var theme = window.sessionStorage.getItem(isIE ? "theme" : "themeStyle");
        var data = { origin: window.location.origin };
        data.themeName =  $('igniteui-theming-widget').length > 0 ?  $('igniteui-theming-widget')[0].theme.globalTheme: null;
        if (isIE) {
            data.theme = theme;
        } else {
            data.themeStyle = theme;
        }
        e.target.contentWindow.postMessage(data, targetOrigin);
    }
});
(function () {
    $(document).ready(function() {
        var sampleIframes = document.querySelectorAll("iframe");
        if ($(".themes-container").length !== 0 && sampleIframes.length !== 0 && !isDvPage()) {
            $(".themes-container").css('display', 'inline-flex');
        } else {
            return;
        }
        
        var isIE = !(window.ActiveXObject) && "ActiveXObject" in window;
        if (isIE) {
            $('.theme-select-wrapper').css('display', 'inline-flex');
            $('.theme-select-wrapper').removeClass('theme-wrapper-hide');
            var currentTheme = window.sessionStorage.getItem("theme");
            if (currentTheme) {
                var item = $(".theme-item").filter("[data-theme=" + currentTheme + "]")[0];
                handleThemeSelection(currentTheme, item);
            }
           

            $(".theme-item").on("click", function (e) {
                if (e.currentTarget.lastElementChild.tagName === "svg") {
                return;
                
                }
                var currentTheme = window.sessionStorage.getItem("theme");
                var newTheme = this.getAttribute("data-theme");
                if (currentTheme !== newTheme) {
                handleThemeSelection(newTheme, this);
                }
            })
        } else {
            $('.theme-widget-wrapper').removeClass('theme-wrapper-hide');
            var themingWidget = $('igniteui-theming-widget');
            if (themingWidget) {
                themingWidget.on('themeChange', function(event) {
                    window.sessionStorage.setItem('themeStyle', event.originalEvent.detail);
                    sampleIframes.forEach(function (element) {
                        if (!$(element).hasClass("no-theming") && (!$(element).hasClass("lazyload") || $(element).hasClass("lazyloaded"))) {
                            var src = !!element.src ? element.src : element.dataset.src;
                            var data = {
                                themeStyle: event.originalEvent.detail,
                                origin: window.location.origin,
                                themeName: themingWidget[0].theme.globalTheme
                            };
                            element.contentWindow.postMessage(data, src);
                        }
                    });
                });
            }
        }
    });

    function handleThemeSelection(theme, item) {
        if (theme) {
            if (isDvPage()) {
            // reset the theme to the default one
                theme = "default-theme";
                window.sessionStorage.setItem('theme', theme);
            }
            if (item) {
                postMessage(theme);
            }
            var visibleItems = $(".theme-item:lt(2)");
            var visibleThemes = [];
            var themeItem = item ? item : $(".theme-item").filter("[data-theme=" + theme + "]")[0];
        
            $.each(visibleItems, function(i, el) {
                visibleThemes.push(el.getAttribute("data-theme"));
            })
        
            if (visibleThemes.indexOf(theme) !== -1) {
                selectTheme(themeItem);
            } else {
                closeContainer();
            }
        }
        
        function postMessage(theme) {
            var targetOrigin = document.body.getAttribute("data-demos-base-url"); 
            var data = {origin: window.location.origin};
            window.sessionStorage.setItem('theme', theme);
            $("iframe").filter(function ( index ) {
                return !this.classList.contains("lazyload")
            }).each( function(i, e)  {
                if(e.classList.contains("no-theming")){
                    data["theme"] = "default-theme";
                }else{
                    data["theme"] = theme;
                }
                var iframeWindow = e.contentWindow;
                iframeWindow.postMessage(data, targetOrigin);
            });
        }
        
        function selectTheme(el) {
            var oldSelection = document.getElementsByClassName("theme-item--active");
            if (oldSelection.length > 0) {
                oldSelection[0].classList.remove("theme-item--active");
            }
            el.classList.add("theme-item--active");
        }
    }
}());

