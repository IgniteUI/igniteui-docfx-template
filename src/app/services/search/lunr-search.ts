//@ts-ignore
import lunr from 'lunr';
import type {ILunr, ISearchData, ISearchItem} from './types'

/**
 * The context of a [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)
 */
const ctx: Worker = self as any;
/**
 * Defining the lunr instance
 */
const lunrInstance: ILunr = {index: undefined, data: {}};
let stopWords: string[];
/**
 * The base directory from where the web worker will fetch the necessary files
 */
let base: string;

ctx.onmessage = (oEvent) => {
  /**
   * This is the initial setup when a papge loads. The main thread sends a message, which contains the base path of the docfx site
   */
  if("basePath" in oEvent.data) {
    base = oEvent.data.basePath;
    initLunr();
  } else {
    /**
     * When a search is triggered from the main thread, a message is send to the web worker with the search query
     */
    let q = oEvent.data.q;
    let hits = lunrInstance?.index?.search(q);
    let results: ISearchItem[] = [];
    hits?.forEach((hit) => {
      let item = lunrInstance?.data[hit.ref];
      results.push(item);
    });
    
    /**
     * After the message is processed by the web worker a message is send to the main thread with the search results
     */
    //@ts-ignore
    postMessage({ e: 'query-ready', q: q, d: results });
  }
}

/**
 * Initializes the lunr search.
 * More information about the lunr search - https://lunrjs.com/guides/getting_started.html
 */
function initLunr(): void {
  lunr.tokenizer(/[\s\-\.]+/);

  let stopWordsRequest = new XMLHttpRequest();
  stopWordsRequest.open('GET', `${base}search-stopwords.json`);
  stopWordsRequest.onload = function () {
    if (this.status != 200) {
      return;
    }
    stopWords = JSON.parse(this.responseText);
    buildIndex();
  }
  stopWordsRequest.send();

  let searchDataRequest = new XMLHttpRequest();

  /**
   * The index.json is autogenerated from the docfx site and contains all of the topics with their text content, paths and titles
   */
  searchDataRequest.open('GET', `${base}index.json`);
  searchDataRequest.onload = function () {
    if (this.status != 200) {
      return;
    }
    
    lunrInstance.data = JSON.parse(this.responseText);
    buildIndex();

    //@ts-ignore
    postMessage({ e: 'index-ready' });
  }

  searchDataRequest.send();
}

/**
 * Builds the Lunr index
 */
function buildIndex() {
  if (stopWords !== null && !isEmpty(lunrInstance.data)) {
    lunrInstance.index = lunr(function () {
      this.pipeline.remove(lunr.stopWordFilter);
      /**
       * Here we [boost](https://lunrjs.com/guides/searching.html#Boosts) the search results to have a higher relevance score based on the content of the topic
       */
      this.ref('href');
      this.field('title', { boost: 20 });
      this.field('keywords', { boost: 50 });

      for (let prop in lunrInstance.data) {
        if (lunrInstance.data.hasOwnProperty(prop)) {
          this.add(lunrInstance.data[prop]);
        }
      }

      let docfxStopWordFilter = lunr.generateStopWordFilter(stopWords);
      lunr.Pipeline.registerFunction(docfxStopWordFilter, 'docfxStopWordFilter');
      this.pipeline.add(docfxStopWordFilter);
      this.searchPipeline.add(docfxStopWordFilter);
    });
  }
}

function isEmpty(obj: ISearchData) {
  if (!obj) return true;

  for (let prop in obj) {
    if (obj.hasOwnProperty(prop))
      return false;
  }

  return true;
}
